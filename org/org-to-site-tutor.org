#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-01-01 Wed 14:26>
#+TITLE: Org To Site Tutor

[[https://emacs-china.org/t/org-mode-site/13874][→ 为什么会有这个页面呢？ :)]]

*如果你是第一次访问这个页面，强烈建议先跳转至附录的 [[*%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD%E5%9B%BE%E7%A4%BA][网站功能图示]] 章节，浏览一下站点的功能使用概要 :)*

#+BEGIN_QUOTE
Emacs China 中的描述，比较散乱，这里整理一下。我尽量把所有的操作步骤纳入其中，以避免不必要的跳转。
#+END_QUOTE

** 更新日志

_1. 预计更新_

- [ ] 本地全局搜索功能（[[http://182.61.145.178:4000/][Hurricane's 实现]]）；
- [ ] 添加 RSS 、sitemap 、robots.txt

_2. 过往更新_

#+BEGIN_QUOTE
- 新增文内随笔样式，随手记录一些东西（2020-08-26 Wed 18:51）
- 新增批注样式，如右侧所示，使用方法见附录右侧批注样式（2020-07-27 Mon 11:01）

#+BEGIN_EXPORT html
<note>
这就是批注喽，可以充分利用右侧的空间。
</note>
#+END_EXPORT

- 新增 =user.config.js= ，抽离一些配置项（微博、GitHub、Author 等）（2020-07-26 Sun 22:36）
- 新增执行脚本 =copy.sh= ，用来在 Emacs 外部同步拷贝图片、JS、CSS 等资源文件（2020-05-29 Fri 21:04）
- 新增执行脚本 =update.sh= ，原因详见 [[*%E5%85%B3%E4%BA%8E%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC][关于执行脚本]]  (2020-05-26 Tue 16:45)
- 双击代码块开始复制，10s 后自动恢复行号（原来的悬浮隐藏有的体验不好）（2020-05-17 Sun 13:04）
- 激活毛玻璃风格（总看纯白色，有点腻歪了……）（2020-05-16 Sat 21:05）
- 对带行号代码块的处理（复制时隐藏行号，确保复制内容只含代码）（2020-04-17 Fri 15:04）
- 添加导航页 ，包括导航和书签 （2020-04-11 Sat 12:11）
- 调整 IDEA 页面样式（2020-04-04 Sat 02:36）
- 本地化依赖库，实现点击查看页面全屏尺寸图片（2020-04-03 Fri 21:58）
- 显示当前代码块类型（2020-04-02 Thu 15:02）
- 添加 [[*%E7%BD%91%E7%AB%99%E5%8A%9F%E8%83%BD%E5%9B%BE%E7%A4%BA][网站功能图示]] (2020-03-27 Fri 19:49)
- 录制删除当前文章的宏（2020-03-22 Sun 18:55）
- [[https://www.bilibili.com/video/av90738660][视频闲聊这个项目]] （2020-03-04 Wed 22:46）
#+END_QUOTE

** 起步

#+BEGIN_QUOTE
这个章节中，我们会叙述如何 _让项目先运行起来_ ，这才是主要的，不是吗？放心，我们会在后续章节中介绍细节。
#+END_QUOTE

_1. 克隆项目到本地家目录_

#+BEGIN_SRC sh -n
  # 进入家目录
  # → Windows
  # C:\Users\<用户名>\AppData\Roaming\site
  cd C:\Users\jack\AppData\Roaming
  # → Gnu/linux & MacOS
  cd ~

  # 克隆项目到家目录
  git clone https://github.com/loveminimal/site.git site
#+END_SRC

_*2. 克隆 Emacs 配置到家目录_

#+BEGIN_QUOTE
如果，你想直接使用自己的 Emacs 配置， _跳过这一步_ 即可。\\
如果，你想使用我的这份配置，那么，完成这一步之后，项目就可以跑起来了。
#+END_QUOTE

#+BEGIN_SRC sh -n
  # 克隆 Emacs 配置到家目录
  git clone https://github.com/loveminimal/emacs.d.git .emacs.d
#+END_SRC

注意，这是我自己在用的 Emacs 配置，你可以先使用它跑一下 Emacs ，体验一下项目效果。

_2. 拷贝 Emacs 配置到你的配置中_

*！因为支持这个项目的配置已经单独抽离了出来 --  [[https://github.com/loveminimal/emacs.d/blob/master/lisp/init-site.el][init-site.el]] ，所以，可以很方便的把它拷贝到你自己的 Emacs 配置中。*

另外，因为我的配置文件是用 [[https://github.com/jwiegley/use-package][use-package]] 组织管理的，如果你自己的配置不是基于它的，你就不得不安装 use-package 了，很简单，只需要贴入如下一段配置即可（并不会影响你原来的配置）：

#+BEGIN_SRC elisp -n
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

只要保证上述 =use-package= 的安装代码，在 =init-site.el= 中的配置之前执行即可（你总得先安装了它，才能使用它，是吧）。

*至此，所有的准备工作，都已经完成了！*

启动 Emacs 后，打开 =...site/org/index.org= 文件，执行 =M-x preview-current-buffer-in-browser= 即可看到效果。

** 简介

本文旨在介绍如何利用 =org-publish= 把 =.org= 文件生成为 =.html= ，以及如何解决静态文件（主要是图片）的缩放问题。

Emacs 是一个强大的 _“编辑器”_ ，或者说 _“操作系统”_ ，它具备强大的可扩展性，拥有丰富的插件， Org Mode 便是其中的佼佼者。 Org Mode 拥有优秀的文本组织方式，并且可以输出多种文本格式，如 =.md= 、 =.txt= 、 =.html= 等。

这个站点的生成方式其实很简单，灵感来自于多方面。感谢 [[https://github.com/fniessen/org-html-themes][org-html-themes]] 项目，Virgo 的生成和组织结构都借鉴了该项目。感谢 [[https://emacs-china.org/][Emacs China]] 社区的朋友，他们提供了许多不错的建议和指导。

** 文件组织方式

[[https://github.com/loveminimal/site][→ loveminimal/site]]

#+BEGIN_EXAMPLE
  site
  |
  |-- org                         # .org 文件
  |   |-- xxx.org
  |
  |-- assets                      # 其它静态文件
  |   |-- doctor.mp3
  |
  |-- css                         # 样式文件，已配置
  |   |-- style.css
  |
  |-- images                      # 图片文件
  |   |-- xxx.jpg/png/gif
  |
  |-- js                          # 逻辑文件
  |   |-- darkreader.js
  |   |-- main.js
  |
  |-- theme-rose.setup            # 头文件
  |
  |-- xxx.sh                      # 可选的执行脚本，如 copy.sh、update.sh
  |
  |-- public                      # 发布后生成的 .html 文件及静态文件
  |
  |-- ...
#+END_EXAMPLE

建议把 site 文件夹放在家目录：
- GNU/Linux 、 Mac 是 =~/= ；
- Windows 是 =C:\Users\jack\AppData\Roaming= ， =jack= 是当前电脑的用户名。

这样做有什么好处呢？

在 Windows 下，Emacs 的配置默认生效的目录就是 =C:\Users\jack\AppData\Roaming= ，该目录被称为漫游家目录。如此，将 site 文件夹也放在这个目录，就会有很多的好处，比如， =.emacs.d= 和 =site= 的相对位置是固定的，基于此你可以做一些定制化的便捷性操作（写一些操作脚本等），并且在切换到 Linux 上使用的时候，保持了操作行为的统一。

** Emacs 中的配置

#+BEGIN_QUOTE
目前，并没有把在 Emacs 中的配置，组织成插件，比较分散，这个主题用来介绍 Virgo 站点生成所需要的配置。
#+END_QUOTE

在我的 [[https://github.com/loveminimal/emacs.d][emacs.d]] 配置中，插件主要使用 [[https://github.com/jwiegley/use-package][use-package]] 组织管理，它同样也是 [[https://github.com/syl20bnr/spacemacs][spacemacs]] 项目所采用的的组织方式。

*** htmlize

该插件用来转换并打开生成的 =.html= 文件。

#+BEGIN_SRC elisp -n
  (use-package htmlize
    :ensure t
    ;; :config
    ;; (setq htmlize-output-type 'font)
    )
#+END_SRC

*** ox-html

#+BEGIN_SRC elisp -n
  (use-package ox-html
    :config
    (setq
     ;; org-html-doctype "html5"
     ;; org-export-default-language "ch"
     user-full-name "Jack Liu"))          ;; 将 "Jack Liu" 更换成你自己的的名称，网站脚注处的 Author 值
#+END_SRC

*** ox-publish

这个是 Emacs 中内置的输出功能，它也是 Virgo 站点生成的核心所在。为了不让大家感到困扰，我把 Virgo 没有用到的一些配置代码全部删除了，如果你想了解更多可以查看 [[https://github.com/loveminimal/emacs.d/blob/master/lisp/init-orgs.el][init-orgs.el]] 文件。强烈建议按照默认的配置使用，等熟悉之后再自定义。

如 [[*%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F][文件组织方式]] 所述，把 =site= 文件夹放在家目录，配置中设置 =:base-directory= 等时设置目录比较方便。

#+BEGIN_SRC elisp -n
  (use-package ox-publish
    :config

    (setq org-publish-project-alist
          '(("orgfiles"
             ;; ; Sources and destinations for files.
             :base-directory "~/site/org/"          ;; ** 源  .org 文件放置的目录
             :publishing-directory "~/site/public/" ;; ** 生成的站点文件放置的目录
             ;; ; Selecting files
             :base-extension "org"
             :recursive t
             ;; ; Publishing action
             :publishing-function org-html-publish-to-html

             ;; ;;; Options for the exporters

             ;; ; Generic properties
             :headline-levels 4
             :section-numbers nil
             :with-author "Jack Liu"                ;; ** 站点拥有者名称
             :with-priority t
             :with-toc t

             ;; ; HTML specific properties
             :html-doctype "html5"

             ;; ; Other options
             :table-of-contents t
             )

            ;; static assets
            ;; 静态文件输出设置
            ("js"
             :base-directory "~/site/js/"
             :base-extension "js"
             :publishing-directory "~/site/public/js/"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("css"
             :base-directory "~/site/css/"
             :base-extension "css"
             :publishing-directory "~/site/public/css/"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("images"
             :base-directory "~/site/images/"
             :base-extension "jpg\\|gif\\|png\\|svg\\|gif"
             :publishing-directory "~/site/public/images/"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("assets"
             :base-directory "~/site/assets/"
             :base-extension "mp3"
             :publishing-directory "~/site/public/assets/"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("webfonts"
             :base-directory "~/site/webfonts/"
             :base-extension "eot\\|svg\\|ttf\\|woff\\|woff2"
             :publishing-directory "~/site/public/webfonts/"
             :recursive t
             :publishing-function org-publish-attachment
             )

            ("website" :components ("orgfiles" "js" "css" "images" "assets" "webfonts"))
            ("statics" :components ("js" "css" "images" "assets" "webfonts"))
            )))
#+END_SRC

*** 默认输出设置

Emacs 默认的 =ox-publish= 会输出一些默认格式，因为比较原生，我们把它禁止掉，只保留对于代码块的高亮。

#+BEGIN_SRC elisp -n
  (progn
    "Settings of `org-export'."
    (setq org-export-in-background t
          ;; Hide html built-in style and script.
          org-html-htmlize-output-type 'inline-css ;; 保留代码块高亮
          org-html-head-include-default-style nil
          org-html-head-include-scripts nil
          ))
#+END_SRC

** 自定义函数

*** 保存并输出页面

为了减少频繁重复性的操作，我们对默认的输出函数进行了一些封装，如下：

#+BEGIN_SRC elisp -n
  (defun save-and-publish-website()
      "Save all buffers and publish."
    (interactive)
    (when (yes-or-no-p "Really save and publish current project?")
      (save-some-buffers t)
      (org-publish-project "website" t)
      (message "Site published done.")))

  (defun save-and-publish-file ()
      "save current buffer and publish."
    (interactive)
    (save-buffer t)
    (org-publish-current-file t))

  (defun save-and-publish-statics ()
    "Just copy statics like js, css, and image file .etc."
    (interactive)
    (org-publish-project "statics" t)
    (message "Copy statics done."))
#+END_SRC

其中：
- =save-and-publish-website= 用来保存当前所有 buffer ，并转换输出所有文件；
- =save-and-publish-file= 用来保存当前 buffer ，并转换输出当前文件；
- =save-and-publish-statics= 只用来拷贝静态文件资源到 =public= 文件夹。其好处在于，当你只修改了静态文件时，无需再手动地拷贝它们，或是执行 =save-and-publish-website= 保存输入整个项目（当 =.org= 文件很多时，速度会很慢）。

建议，绑定函数到按键，更加方便操作。如，我使用的 evil 中它们分别被绑定到 =<SPC> p w= 、 =<SPC> p f= 和 =<SPC> p s= 按键。

*** 预览当前页面

#+BEGIN_SRC elisp -n
  (defun preview-current-buffer-in-browser ()
    "Open current buffer as html."
    (interactive)
    (let ((fileurl (concat "http://127.0.0.1:8080/" (file-name-base (buffer-name)) ".html")))
      (save-and-publish-file)
      (unless (httpd-running-p) (httpd-start))
      (browse-url fileurl)))
#+END_SRC

注意，当前函数基于 [[https://github.com/skeeto/emacs-web-server][emacs-web-server]] 插件，下载并配置如下：

#+BEGIN_SRC elisp -n
  (use-package simple-httpd
    :ensure t
    :config
    (setq httpd-root "~/site/public"))    ;; Set default server directory
#+END_SRC

如此，当执行 =M-x preview-current-buffer-in-brower= 时，就可以在默认浏览器中该页面了。

*** 删除 Org 及 Html

有时候，我们会对 =.org= 文件进行删除操作，为了使网站也删除这个页面，就需要删除其对应的 =.html= 文件，然而，每次都进行这样的步骤是一件令人讨厌的事。现在，我们可以使用下面这个函数，它会删除当前 =.org= 文件，且同时删除其生成的 =.html= 文件。

#+BEGIN_SRC elisp -n
  (defun delete-org-and-html ()
  "Delete the relative html when it exists."
  (interactive)
  (when (yes-or-no-p "Really delete current org and the relative html?")

    (let ((fileurl (concat "~/site/public/" (file-name-base (buffer-name)) ".html")))
      (if (file-exists-p fileurl)
          (delete-file fileurl))
      (delete-file (buffer-file-name))
      (kill-this-buffer)
      (message "Delete org and the relative html done."))))
#+END_SRC

** 自定义宏

*** 删除当前文章

目前，我们在 =./index.org= 的列表 =Table= 中管理所有的文章。通过执行这个宏 =mc/delete-this-post= ，可以同时删除当前光标下的 =.org= 文件及其对应的 =.html= 文件。

#+BEGIN_SRC elisp -n
  (fset 'mc/delete-this-post
     " fo pdydd")
#+END_SRC

注：这个宏依赖于 [[*%E5%88%A0%E9%99%A4 Org %E5%8F%8A Html][delete-org-and-html]] 这个函数。

#+BEGIN_QUOTE
宏，会让人变“懒”。
#+END_QUOTE

如， =mc/delete-this-post= 这个宏其实就是录制了一系列的操作：
- =<SPC> fo= ，执行打开光标下的连接；
- =<SPC> pd= ，执行 =delete-org-and-html= 函数；
- =y= ，确定执行 =delelte-org-and-html= 函数；
- =dd= ，删除所在光标所在行，即当前文章在主页中的行。

** 自定义模式

[[https://github.com/kaushalmodi/ox-hugo/blob/master/org-hugo-auto-export-mode.el][→ org-hugo-auto-export-mode]]

以前在使用 ox-hugo 的时候，接触到了 =org-hugo-auto-export-mode= 这个模式，它用来实现在保存当前 buffer 的时候，自动根据当前 =.org= 文件内容导出相应的 =.md= 。

沿着这个思路，我写了一个类似的 minor mode ，用来实现在保存当前 buffer 的时候，自动导出相应的 =.html= 文件。如下：

#+BEGIN_SRC elisp -n
  (define-minor-mode auto-save-and-publish-file-mode
    "Toggle auto save and publish current file."
    :global nil
    :lighter ""
    (if auto-save-and-publish-file-mode
        ;; When the mode is enabled
        (progn
          (add-hook 'after-save-hook #'save-and-publish-file :append :local))
      ;; When the mode is disabled
      (remove-hook 'after-save-hook #'save-and-publish-file :local)))
#+END_SRC

** 图片

#+BEGIN_QUOTE
NOTE: 这个章节只是补充，可以不了解。
#+END_QUOTE

静态页面的图片输出一直是个让人比较烦扰的问题，在 Windows 上输出指定大小的图片比较不易，我们可以曲线实现，在 =.org= 文件中插入 Html 标签，如：

#+BEGIN_EXAMPLE
  ,#+BEGIN_EXPORT html
  <img src="/images/xxx.jpg" width="60%" />
  ,#+END_EXPORT
#+END_EXAMPLE

如此，便可以指定图片输出的宽高。为了方便，你可以使用 yasnippet 写一个快速插入的 snippet ，如：

#+BEGIN_EXAMPLE
  # -*- mode: snippet -*-
  # name: insert img
  # key: ii
  # --
  <img src="/images/$1" width="${2:6}0%" />
#+END_EXAMPLE

** 总结

总体来说，比较简单，也不需要下载多少额外的插件，充分利用 Emacs 本身拥有的功能。综上所述，我们来总结一下步骤：
1. =git clone https://github.com/loveminimal/site.git ~/site= ，即把 site 文件夹放在家目录；
2. 把 [[*Emacs %E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE][Emacs 中的配置]] 的配置添加到 Emacs 的配置文件中；
3. 在 Emacs 中执行封装的 [[*%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0][自定义函数]] 即可。

如此，生成的 public 文件夹中就是你的站点所需要的一切文件，把它部署到 Github 或是私人服务器即可。

** 附录

*** 网站功能图示

#+BEGIN_EXPORT html
<img
src="/images/page1.jpg"
width="390"
style="box-shadow: 3px 3px 5px #aaa;"
/>
#+END_EXPORT

#+BEGIN_EXPORT html
<img
src="/images/page2.jpg"
width="390"
style="box-shadow: 3px 3px 5px #aaa; float: right;"
/>
#+END_EXPORT

_1. 文章列表_

所有文章在主页列表中管理、分类，光标移入/移出表头，用来切换其内容（文章标题）的显示/隐藏。

_2. 主题切换_

站点提供了亮/暗两种主题模式，所有页面点击文章标题，即可切换。

#+BEGIN_EXPORT html
<img
src="/images/page3.jpg"
width="390"
style="box-shadow: 3px 3px 5px #aaa;"
/>
#+END_EXPORT

#+BEGIN_EXPORT html
<img
src="/images/page4.jpg"
width="390"
style="box-shadow: 3px 3px 5px #aaa; float: right;"
/>
#+END_EXPORT

_3. 目录显隐_

光标移入/移出页面左侧（移动端点击页面顶部），用来切换目录的显示/隐藏。

_4. 返回主页和回到顶部_

右下角，包含两个功能按钮 - =IDX ←= （返回主页）和 =TOP ↑=  （返回页面顶部，且滚动时显示当前页面滚动百分比）。

*** 关于执行脚本

为什么会有这个脚本？我们来看这样一种场景。

#+BEGIN_QUOTE
小伙伴甲表示，他正在愉快地写博客，发现“无聊的 Jack”又提交更新了一些东东……

看看提交日志，完全是其个人的一些文章的更新，不用管！（嫌弃 -_||）

看看提交日志，更新了一些小功能还不错，BUT 一但拉取了更新，自己的文章就会被覆盖…… 不更新吧，这次更新的小东西好像还有那么点意思 !_!
#+END_QUOTE

这个执行脚本主要解决上述问题，它会保持你的文章状态，在拉取更新后自动恢复它，避免每次手动拷贝 ^_^

*已经完工了 ^_^*

_1. 添加当前 Repo 为新的远程库_

- 执行 =git remote -v= ，展示当前仓库已经连接的远程库；
- 执行 =git remote add virgo https://github.com/loveminimal/site.git= ，添加该远程库；
- 再次执行 =git remote -v= ，检查是否添加成功。

_2. 在 bash 终端执行脚本_

在 Unix/Linux/Mac 下，就是在终端喽，至于 Windows ，你应该在 git-bash 中执行这个脚本（真心不想写 Powershell 脚本了...）。

如果想拉取最近的更新，只需要执行：

#+BEGIN_SRC sh -n
  # 在 site 站点目录下，执行
  ./update.sh
#+END_SRC

放心，它会保存你的文章状态，并在拉取更新后恢复它。
*** 右侧批注样式

其实，使用很简单，我们把要加的批注写在 =<note>...</note>= 中就可以了，放心，在渲染的时候已经做好了处理，如下：

#+BEGIN_EXPORT html
<note>
Tips：诸如此类经常需要插入的片段，可以尝试使用 abbr 或 yasnippets 哦，推荐后者 :)
</note>
#+END_EXPORT

#+BEGIN_SRC html -n
#+BEGIN_EXPORT html
<note>
这就是批注喽，哈哈，可以充分利用右侧的空间。
</note>
#+END_EXPORT
#+END_SRC

原理就是，在 Org Mode 中输出 HTML 片段，指定了自定义的标签 =<note>= （用来后续的 DOM 操作）。在浏览器渲染的过程中，无效的标签符并不会做为普通文本绘制出来，但其内的内容却可以。

*** 文内随笔样式

#+BEGIN_EXPORT html
<essay>
  <p>沁园春·雪</p>

  <div>近现代： 毛泽东</div>
  <div>北国风光，千里冰封，万里雪飘。</div>
  <div>望长城内外，惟余莽莽；大河上下，顿失滔滔。(余 通：馀)</div>
  <div>山舞银蛇，原驰蜡象，欲与天公试比高。(原驰 原作：原驱)</div>
  <div>须晴日，看红装素裹，分外妖娆。(红装 一作：银装)</div>
  <div>江山如此多娇，引无数英雄竞折腰。</div>
  <div>惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。</div>
  <div>一代天骄，成吉思汗，只识弯弓射大雕。</div>
  <div>俱往矣，数风流人物，还看今朝。</div>
</essay>
#+END_EXPORT
