#+SETUPFILE: ../theme-rose.setup
#+DATE: <2021-02-05 Fri 15:50>
#+TITLE: 当做我在扯淡（三）

** 测试驱动开发

美的程序不可能从修修补补中来。它必须完美的把握事物的本质，否则就会有许许多多无法修补的特例。

** 我为什么离开 Cornell

……

** Scheme 编程环境的设置

……

** 什么是启发

Richard Feynman 也提到：“在你的头脑里随时准备好12个问题。每当发生一件有趣的事情，就检查一下其中是否有问题可以由此获得线索。久而久之，人们就会称你为天才。”

孔夫子所谓的“三人行必有我师”，也就是这个意思吧。

** 谈程序的“通用性”

在现实的软件工程中，我经常发现这样的一种现象，本来用很简单的代码就可以解决的问题，却因为设计者过分的关注了“通用性”、“可维护性”和“可扩展性”，被搞得绕了几道弯，让人琢磨不透。

这些人的思维方式是这样的：“将来这段代码可能会被用到更多的场合，所以我现在就考虑到扩展问题。”于是乎，他们在代码中加入了各种各样的“框架结构”，目的是为了在将来有新的需要的时候，代码能够“不加修改”就被用到新的地方。

我并不否认“通用性”的价值，实际上我的某些程序通用性非常之强。可是很多人所谓的“通用性”，其实达到的是适得其反的效果。这种现象通常被称为“过度工程” (over-engineer)。

#+BEGIN_EXPORT html
<essay>
关键是把握好度。
</essay>
#+END_EXPORT

……

所以在设计程序的时候，我们最好是先把手上的问题解决好。如果发现这段代码还可以被用在很多别的地方，到时候再把框架从中抽象出来也不迟。

#+BEGIN_EXPORT html
<essay>
如果是私人项目，这样做自然是可以的，但是如果是一个公共项目，没有从一开始就组织一个比较合理的结构，基本上就是指数级的负重前行了……
</essay>
#+END_EXPORT

** 论“我”和“我们”

……

** Markdown 的一些问题

Markdown 实际上采用的是类似 Python 和 Haskell 的 layout 语法。

我已经在一篇英文博文里提到了 layout 语法的多种问题。因为空格的数量决定了文档的结构，这种文档格式相当的“脆弱”。稍微少打一两个空格，就会出现不可预测的结果。

特殊字符的选择不合理。

表达力相当有限。

在很多细节上，markdown 并不能表达我想要的格式。比如它不能正确的插入断行 <br>。如果你有两块紧接在一起的代码，但你不想把它们连在一起，markdown 非要给你连在一起…… 于是我就发现自己加入了越来越多的 HTML。

这在图片的语法上就更加明显，markdown 引入了 ![alt](image url) 这样的格式，其实比起 HTML 还要难看和不一致。比如现在它仍然无法表达图片的大小，这是相当重要的信息。所以我觉得 markdown 的语法已经显示出了它的弱点，如果它要表达更复杂的信息，就会变得比 HTML 还要难记，难看。所以对于图片，我觉得还不如直接用 HTML 的 <img> 。

#+BEGIN_EXPORT html
<essay>
无法控制图片尺寸，是我放弃使用 Markdown 的主要原因！！！
</essay>
#+END_EXPORT

** 一种新的操作系统设计

我一直在试图利用程序语言的设计原理，设计一种超越“Unix 哲学”的操作系统。

……

我曾经以为我是第一个想到这个做法的人。可是调查之后发现，很多人早就已经做出了类似的系统。Lisp Machine 似乎是其中最接近的一个。

#+BEGIN_EXPORT html
<essay>
所以，你可能不会写这个操作系统了……
</essay>
#+END_EXPORT

** 标准化试卷标记语言

……

** 几个超炫的专业词汇

……

